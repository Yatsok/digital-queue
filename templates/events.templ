package templates

import (
    "fmt"
    "strconv"

	"github.com/google/uuid"
    "github.com/Yatsok/digital-queue/internal/models"
    "github.com/Yatsok/digital-queue/internal/helper"
	"time"
)

templ CreateEventForm(req *models.EventRequestGET) {
    @NavbarBase(req.AuthStatus)
    <h1 class="my-4 text-2xl font-semibold text-center text-gray-700">Describe the Event</h1>
    <ul class="steps my-2 flex justify-center align-center">
        <li class="step step-primary text-xs"></li>
        <li class="step"></li>
        <li class="step"></li>
    </ul>
    <form 
        hx-post="/event" 
        hx-trigger="submit"
        hx-ext='json-enc'
        class="w-full max-w-md mx-auto">
        <div class="editor mx-auto flex flex-col text-gray-800 border border-gray-300 p-4 shadow-lg max-w-screen-lg">
            <input 
                name="name" 
                class="title bg-gray-100 border border-gray-300 p-2 mb-4 outline-none" 
                spellcheck="false" 
                placeholder="Title" 
                type="text" 
                required />
            <textarea 
                name="description"  
                class="description bg-gray-100 sec p-3 h-60 border border-gray-300 outline-none" 
                spellcheck="false" 
                placeholder="Describe everything about this event here" 
                required>
            </textarea>
            <div class="buttons flex justify-end">
                <button 
                    class="btn border mt-6 border-indigo-500 p-1 px-4 font-semibold cursor-pointer text-gray-200 ml-2 bg-indigo-500"
                    _="on click trigger submit">
                    Create Event
                </button>
            </div>
        </div>
    </form>
}

templ UploadImageForm(req *models.EventRequestGET) {
    @NavbarBase(req.AuthStatus)
    <div class="relative">
        <script src="/js/upload.js" />
        <h1 class="my-4 text-2xl font-semibold text-center text-gray-700">Add Image</h1>
        if time.Since(req.Event.CreatedAt) < 5 * time.Minute {
            <ul class="steps my-2 flex justify-center align-center">
                <li class="step step-primary text-xs"></li>
                <li class="step step-primary"></li>
                <li class="step"></li>
            </ul>
        } else {
            <button hx-get={ fmt.Sprintf( "/event/%s", req.Event.ID.String() ) } type="button" class="absolute btn btn-accent -top-2 left-2">Back</button>
        }
        <form 
            hx-post="/upload" 
            hx-trigger="submit"
            class="w-full max-w-md mx-auto"
            enctype="multipart/form-data">
            <input type="hidden" name="entityPrefix" value="event" />
            <input type="hidden" name="entityID" value={ req.Event.ID.String() } />
            if time.Now().UTC().Sub( req.Event.CreatedAt.UTC() ) < 5 * time.Minute {
                <input type="hidden" name="type" value="new" />
            } else {
                <input type="hidden" name="type" value="old" />
            }
            <div class="editor mx-auto flex flex-col text-gray-800 border border-gray-300 p-4 shadow-lg max-w-screen-lg">
                <h1 class="text-center text-2xl sm:text-2xl font-semibold mb-4 text-gray-800">File Drop and Upload</h1>
                <div 
                    class="bg-gray-100 p-8 text-center rounded-lg border-dashed border-2 border-gray-300 hover:border-blue-500 transition duration-300 ease-in-out transform hover:scale-105 hover:shadow-md" 
                    id="dropzone">
                    <label 
                        for="fileInput" 
                        class="cursor-pointer flex flex-col items-center space-y-2">
                        <svg class="w-16 h-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        <span class="text-gray-600">Drag and drop your file here</span>
                        <span class="text-gray-500 text-sm">(or click to select)</span>
                    </label>
                    <input name="image" type="file" id="fileInput" class="hidden" />
                </div>
                <div class="mt-6 text-center" id="fileList"></div>
            </div>
            <div class="buttons flex justify-between">
                <button 
                    hx-trigger="submit" 
                    class="btn border mt-6 border-indigo-500 p-1 px-4 font-semibold cursor-pointer text-gray-200 ml-2 bg-indigo-500">
                    Upload
                </button>
                if time.Since(req.Event.CreatedAt) < 5 * time.Minute {
                    <button 
                        hx-get={ fmt.Sprintf( "/event/%s/add", req.Event.ID.String() ) }
                        class="btn border mt-6 border-indigo-500 p-1 px-4 font-semibold cursor-pointer text-gray-200 ml-2 bg-indigo-500">
                        Next
                    </button>
                } else {
                    <button 
                        hx-get={ fmt.Sprintf( "/event/%s", req.Event.ID.String() ) }
                        class="btn border mt-6 border-indigo-500 p-1 px-4 font-semibold cursor-pointer text-gray-200 ml-2 bg-indigo-500">
                        View Event Details
                    </button>
                }
            </div>
        </form>
    </div>
}

templ EditEventForm(req *models.EventRequestGET) {
    @NavbarBase(req.AuthStatus)
    <div class="relative">
        <button hx-get={ fmt.Sprintf( "/event/%s", req.Event.ID.String() ) } type="button" class="absolute btn btn-accent -top-2 left-2">Back</button>
        <h1 class="my-4 text-2xl font-semibold text-center text-gray-700">Edit Event</h1>
        <form 
            hx-put="/event" 
            hx-trigger="submit"
            hx-ext='json-enc'
            class="w-full max-w-md mx-auto">
            <input type="hidden" name="event_id" value={ req.Event.ID.String() } />
            <div class="editor mx-auto flex flex-col text-gray-800 border border-gray-300 p-4 shadow-lg max-w-screen-lg">
                <input 
                    name="name" 
                    class="title bg-gray-100 border border-gray-300 p-2 mb-4 outline-none" 
                    spellcheck="false" 
                    placeholder="Title" 
                    value={ req.Event.Name }
                    type="text" 
                    required />
                <textarea 
                    name="description"  
                    class="description bg-gray-100 sec p-3 h-60 border border-gray-300 outline-none" 
                    spellcheck="false" 
                    placeholder="Describe everything about this event here" 
                    required>
                    { req.Event.Description }
                </textarea>
                <div class="buttons flex justify-end">
                    <button 
                        hx-trigger="submit" 
                        class="btn border mt-6 border-indigo-500 p-1 px-4 font-semibold cursor-pointer text-gray-200 ml-2 bg-indigo-500">
                        Save
                    </button>
                </div>
            </div>
        </form>
    </div>
}

templ EventDetails(req *models.EventRequestGET) {
    @NavbarBase(req.AuthStatus)
    <div class="container min-w-full relative">
        <button hx-get="/events" type="button" class="absolute btn btn-accent -top-4 left-2">Back</button>
        <div class="mt-5">
            <h3 class="text-primary text-center">Event Details</h3>
            <hr class="mt-3 border-b-2 border-primary" />
            <div class="mt-3">
            if req.OwnershipStatus {
            <div class="mx-2 flex justify-center align-center">
                @DeleteConfirmationModal("event", req.Event.ID.String())
                <button 
                    class="btn btn-primary me-2" 
                    hx-get={ fmt.Sprintf("/event/%s/edit", req.Event.ID.String()) }
                    hx-trigger="click" >
                    Edit
                </button>
                <button 
                    class="btn btn-secondary me-2" 
                    hx-get={ fmt.Sprintf("/event/%s/upload", req.Event.ID.String()) }
                    hx-trigger="click" >
                    Upload Image
                </button>
                <button 
                    class="btn btn-success" 
                    hx-get={ fmt.Sprintf("/event/%s/add", req.Event.ID.String()) }
                    hx-trigger="click" >
                    Add Slots
                </button>
            </div>
            }
            <br />
            @EventCard(req)
            <br />

            <h3 class="text-primary text-center">Event Slots</h3>
            <hr class="mt-3 border-b-2 border-primary" />
            switch req.AuthStatus {
                case true:
                    <div 
                        hx-get={ fmt.Sprintf("/event/%s/slots", req.Event.ID.String()) } 
                        hx-trigger="load, table-update from:body"
                        hx-swap="innerHTML">
                    </div>
                case false:
                    <p>Please log in to view and reserve time slots.</p>
                }
            <br />
            </div>
        </div>
    </div>
}

templ EventCard(req *models.EventRequestGET) {
    <div class="max-w-[95%] mx-auto bg-white rounded-xl shadow-lg overflow-hidden my-3 px-2 border border-slate-800">
        <div class="md:flex">
            <div class="md:flex-shrink-0">
                <img class="h-48 w-full object-cover md:w-48" src={ req.Event.ImagePath } alt="Thumbnail" />
            </div>
            <div class="p-8">
            <div class="uppercase tracking-wide text-sm text-indigo-500 font-semibold">{ req.Event.Name }</div>
                <p class="block mt-1 text-lg leading-tight font-medium text-black">{ req.Event.Description }</p>
                <p class="mt-2 text-gray-500">{ fmt.Sprintf("Available Time Slots: %d", helper.CountAvailableTimeSlots(req.TimeSlots[req.Event.ID.String()]) ) }</p>
            </div>
        </div>
    </div>
}

templ TimeSlotTable(req *models.EventRequestGET){
    <script>
        function toggleVisibility(elementId) {
            const targetElement = document.getElementById(elementId);
            targetElement.classList.toggle('hidden');
        }
    </script>
    <div class="flex flex-col justify-center align-center items-center">
        <div class="overflow-x-auto sm:-mx-6 lg:-mx-8 w-full">
            <div class="inline-block w-full py-2 sm:px-6 lg:px-8">
                <div class="overflow-hidden">
                    <table class="max-w-screen text-left text-sm font-light">
                        if len(req.TimeSlots[req.Event.ID.String()]) > 0 {
                            <div class="container mx-auto pt-4 px-4 py-16">
                                <div style="overflow-x:auto;">
                                    <table class="w-full shadow-lg rounded">
                                        @SlotTableHeader(req.OwnershipStatus)
                                        <tbody class="bg-white">
                                            for _, timeSlot := range req.TimeSlots[req.Event.ID.String()] {
                                                @TimeSlotContainer(&timeSlot, req.OwnershipStatus, req.UserID, req.Timezone, req.ImagePath)
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        } else {
                            <p class="text-primary text-center">No time slots available</p>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
}

templ SlotTableHeader(ownershipStatus bool){
    <thead>
        <tr class="text-center bg-gray-300 border-b border-grey uppercase">
            <th class="table-cell md:hidden text-sm text-gray-700">Time Constraints</th>
            <th class="hidden md:table-cell text-sm text-gray-700">Start Time</th>
            <th class="hidden md:table-cell text-sm text-gray-700">End Time</th>
            <th class="hidden md:table-cell text-sm text-gray-700">Time Until Start</th>
            if ownershipStatus {
                <th class="table-cell px-2 py-6">Actions</th>
            } else {
                <th class="table-cell px-2 py-6">Reservation</th>
            }
        </tr>
    </thead>
}

templ TimeSlotContainer(timeSlot *models.TimeSlot, ownershipStatus bool, userID uuid.UUID, timezone, imagePath string){
    <tr class="accordion border-b border-grey-light hover:bg-gray-100">
        <td class="table-cell md:hidden items-center">
            <span class="py-3 w-40">
                <p class="text-sm text-gray-600 font-medium">Start: { helper.TimeInLocation(timeSlot.StartTime.String(), timezone).Format("January 2, 15:04") }</p>
                <p class="text-sm text-gray-600 font-medium">End: { helper.TimeInLocation(timeSlot.EndTime.String(), timezone).Format("January 2, 15:04") }</p>
                if helper.TimeInLocation(timeSlot.StartTime.String(), timezone).Sub(time.Now().UTC()) > 0 {
                    <p class="text-gray-800 text-sm font-medium">Until Start: { helper.FormatDuration(helper.TimeInLocation(timeSlot.StartTime.String(), timezone).Sub(time.Now().UTC())) }</p>
                } else {
                    <p class="text-gray-800 text-sm font-medium">Already started</p>
                }
            </span>
        </td>
        <td class="hidden text-center md:table-cell">
            <p class="inline-block text-gray-800 text-sm">{ helper.TimeInLocation(timeSlot.StartTime.String(), timezone).Format("January 2, 15:04") }</p>
        </td>
        <td class="hidden text-center md:table-cell">
            <p class="inline-block text-gray-800 text-sm">{ helper.TimeInLocation(timeSlot.EndTime.String(), timezone).Format("January 2, 15:04") }</p>
        </td>
        <td class="hidden text-center md:table-cell">
        if helper.TimeInLocation(timeSlot.StartTime.String(), timezone).Sub(time.Now().UTC()) > 0 {
            <p class="inline-block text-gray-800 text-sm">{ helper.FormatDuration(helper.TimeInLocation(timeSlot.StartTime.String(), timezone).Sub(time.Now().UTC())) }</p>
        } else {
            <p class="inline-block text-gray-800 text-sm">Already started</p>
        }
        </td>
        if ownershipStatus {
        <td class="flex align-center justify-center">
            <svg
                class="mr-3 md:mr-1 h-12 w-6 fill-current text-grey-dark"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                _={ fmt.Sprintf( "on click call toggleVisibility('slotActions%s')", timeSlot.ID.String() ) }
            >
                <path
                d="M4 12a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm6 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm6 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4z"
                />
            </svg>
        </td>
        } else {
            <td class="table-cell text-center py-4">
                @ReserveOrCancelButton(timeSlot, ownershipStatus)
            </td>
        }
    </tr>
    if ownershipStatus {
        <tr id={ fmt.Sprintf( "slotActions%s", timeSlot.ID.String() ) }
            class="hidden accordion border-b border-grey-light">
            <td class="hidden md:table-cell text-center py-4">@ReserveOrCancelButton(timeSlot, ownershipStatus)</td>
            <td class="table-cell text-center py-4">@ViewSlotInfoButton(timeSlot, timezone, imagePath)</td>
            <td class="table-cell text-center py-4">@DeleteConfirmationModal("slot", timeSlot.ID.String())</td>
            <td class="hidden md:table-cell text-center py-4"></td>
        </tr>
    }
}

templ ViewSlotInfoButton(timeSlot *models.TimeSlot, timezone, imagePath string) {
    if timeSlot.UserID != nil {
        <button 
            class="btn btn-primary me-2"
            _={ fmt.Sprintf("on click call Swal.fire({ title: 'Time Slot Information', html:`<div class='avatar'><div class='bg-neutral text-neutral-content rounded-full w-32 h-32 mb-4 shrink-0'><img src='%s' /></div></div><br/><p>Reserved by: %s</p><br/><p>Start Time: %s</p><br/><p>End Time: %s</p><br/>`})", imagePath, timeSlot.ReservedBy, helper.TimeInLocation(timeSlot.StartTime.String(), timezone).Format("January 2, 15:04"), helper.TimeInLocation(timeSlot.EndTime.String(), timezone).Format("January 2, 15:04"))}>
            View
        </button>
    } else {
        <button 
            class="btn btn-primary me-2"
            _={ fmt.Sprintf("on click call Swal.fire({ title: 'Time Slot Information', html:`<div class='avatar'><div class='bg-neutral text-neutral-content rounded-full w-32 h-32 mb-4 shrink-0'><img src='/img/user.jpg' /></div></div><br/><p>Reserved by: N/A</p><br/><p>Start Time: %s</p><br/><p>End Time: %s</p><br/>`})", helper.TimeInLocation(timeSlot.StartTime.String(), timezone).Format("January 2, 15:04"), helper.TimeInLocation(timeSlot.EndTime.String(), timezone).Format("January 2, 15:04"))}>
            View
        </button>
    }
}

templ ReserveOrCancelButton(timeSlot *models.TimeSlot, ownershipStatus bool) {
    if timeSlot.UserID == nil {
        <button 
            hx-put={ fmt.Sprintf("/slot/%s/reserve", timeSlot.ID.String() )}
            class="btn btn-accent me-2"
            hx-trigger="confirmed"
            _="on click
                call Swal.fire({
                    title: 'Confirm', 
                    text:'Are you sure you want to reserve this slot?', 
                    showCancelButton: true, 
                    icon: `question`
                })
                if result.isConfirmed trigger confirmed">
            Reserve
        </button>
    }
    if timeSlot.UserID != nil || (timeSlot.UserID != nil && ownershipStatus) {
        <button 
            hx-put={ fmt.Sprintf("/slot/%s/cancel", timeSlot.ID.String() )}
            class="btn btn-warning me-2"
            hx-trigger="confirmed"
            _="on click
                call Swal.fire({
                    title: 'Confirm', 
                    text:'Are you sure you want to cancel reservation?', 
                    showCancelButton: true, 
                    icon: `question`
                })
                if result.isConfirmed trigger confirmed">
            Cancel
        </button>
    }
}

templ EventsList(req *models.EventRequestGET) {
    @NavbarBase(req.AuthStatus)
    <div class="container mt-5 min-w-full">
        <h3 class="text-primary text-center">Attend an Event</h3>
        <hr class="mt-3 border-b-2 border-primary" />
        <div class="mt-5">
            if len(req.Events) > 0 {
                <div>
                    for _, event := range req.Events {
                        @EventListCard(event, req.TimeSlots[event.ID.String()])
                    }
                </div>
                @EventPagination(req)
            } else {
                <p>There are no events available.</p>
            }
        </div>
    </div>
}

templ EventListCard(event *models.Event, timeSlots []models.TimeSlot) {
    <div class="max-w-[95%] mx-auto bg-white rounded-xl shadow-lg overflow-hidden my-3 px-2 border border-slate-800 hover:shadow-xl hover:border-2">
        <div class="md:flex">
            <div class="md:flex-shrink-0">
                <img class="h-48 w-full object-cover md:w-48" src={ event.ImagePath } alt="Placeholder" />
            </div>
            <div class="p-8">
            <div class="uppercase tracking-wide text-sm text-indigo-500 font-semibold">{ event.Name }</div>
                <p class="block mt-1 text-lg leading-tight font-medium text-black">{ event.Description }</p>
                <p class="mt-2 text-gray-500">{ fmt.Sprintf("Available Time Slots: %d", helper.CountAvailableTimeSlots(timeSlots) ) }</p>
                <button 
                    class="mt-5 px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    hx-get={ fmt.Sprintf("/event/%s", event.ID.String()) }>
                    Book Appointment
                </button>
            </div>
        </div>
    </div>
}

templ EventPagination(req *models.EventRequestGET) {
    <div class="flex max-w-full border md:max-w-screen-md lg:max-w-screen-lg xl:max-w-screen-xl mx-auto bg-white p-6 rounded-lg shadow-sm justify-center align-center text-xl">
        if req.Page > 1 {
            <a class="relative inline-flex items-center px-4 py-2 text-sm bg-gradient-to-r from-violet-300 to-indigo-300 
                border border-fuchsia-100 hover:border-violet-100 text-white font-semibold cursor-pointer leading-5 
                rounded-md transition duration-150 ease-in-out 
                focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10" 
            hx-get={ fmt.Sprintf("/events/%d", 1) }>
                <span>
                    <svg width="8" height="15" viewBox="0 0 8 15" class="fill-current stroke-current">
                        <path d="M7.12979 1.91389L7.1299 1.914L7.1344 1.90875C7.31476 1.69833 7.31528 1.36878 7.1047 1.15819C7.01062 1.06412 6.86296 1.00488 6.73613 1.00488C6.57736 1.00488 6.4537 1.07206 6.34569 1.18007L6.34564 1.18001L6.34229 1.18358L0.830207 7.06752C0.830152 7.06757 0.830098 7.06763 0.830043 7.06769C0.402311 7.52078 0.406126 8.26524 0.827473 8.73615L0.827439 8.73618L0.829982 8.73889L6.34248 14.6014L6.34243 14.6014L6.34569 14.6047C6.546 14.805 6.88221 14.8491 7.1047 14.6266C7.30447 14.4268 7.34883 14.0918 7.12833 13.8693L1.62078 8.01209C1.55579 7.93114 1.56859 7.82519 1.61408 7.7797L1.61413 7.77975L1.61729 7.77639L7.12979 1.91389Z" stroke-width="0.3"></path>
                    </svg>
                </span>
            </a>
        }

        for _, page := range req.Pagination {
            if page == req.Page {
                <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 border border-fuchsia-100 
                    bg-fuchsia-200 leading-5 rounded-md transition duration-150 ease-in-out 
                    focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10">{ strconv.Itoa(page) }</span>
            } else {
                <a class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-fuchsia-100 
                    hover:bg-fuchsia-200 cursor-pointer leading-5 rounded-md transition duration-150 ease-in-out 
                    focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10" 
                    hx-get={ fmt.Sprintf("/events/%d", page) }> { strconv.Itoa(page) }</a>
            }
        }

        if req.Page < req.TotalPages {
            <a class="relative inline-flex items-center px-4 py-2 text-sm bg-gradient-to-r from-violet-300 to-indigo-300 
                border border-fuchsia-100 hover:border-violet-100 text-white font-semibold cursor-pointer leading-5 
                rounded-md transition duration-150 ease-in-out 
                focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10" 
                hx-get={ fmt.Sprintf("/events/%d", req.TotalPages) }>
                <span>
                    <svg width="8" height="15" viewBox="0 0 8 15" class="fill-current stroke-current">
                        <path d="M0.870212 13.0861L0.870097 13.086L0.865602 13.0912C0.685237 13.3017 0.684716 13.6312 0.895299 13.8418C0.989374 13.9359 1.13704 13.9951 1.26387 13.9951C1.42264 13.9951 1.5463 13.9279 1.65431 13.8199L1.65436 13.82L1.65771 13.8164L7.16979 7.93248C7.16985 7.93243 7.1699 7.93237 7.16996 7.93231C7.59769 7.47923 7.59387 6.73477 7.17253 6.26385L7.17256 6.26382L7.17002 6.26111L1.65752 0.398611L1.65757 0.398563L1.65431 0.395299C1.454 0.194997 1.11779 0.150934 0.895299 0.373424C0.695526 0.573197 0.651169 0.908167 0.871667 1.13067L6.37922 6.98791C6.4442 7.06886 6.43141 7.17481 6.38592 7.2203L6.38587 7.22025L6.38271 7.22361L0.870212 13.0861Z" stroke-width="0.3"></path>
                    </svg>
                </span>
                </a>
        }
    </div>
}
